## KAFKA-SPECIFIC SETTINGS
##########################

# listeners (REQUIRED): what IP address + port the Proxy is attempting to bind to.
# For cloud providers, this is usually the private IP address of the host

listeners: PLAINTEXT://localhost:9092,SASL_SSL://localhost:9094
#listeners: PLAINTEXT://10.1.2.3:9092

# advertised.listeners (OPTIONAL):
# For cloud providers, this is usually the public IP address
# This is often required if running in a container as well
# Number of entries must = number of listeners
#advertised.listeners: PLAINTEXT://172.1.2.3:9092,SASL_SSL://172.1.2.3:9094
#advertised.listeners: PLAINTEXT://public.host.domain:9092,SASL_SSL://public.host.domain:9094

# SSL/TLS Settings for Kafka Client->Proxy connections
### PROXY SERVER CERTIFICATE
ssl.keystore.location: /path/to/certs/keystore.pkcs12
ssl.keystore.password: serverpass
## JKS or PCKS12
ssl.keystore.type: PKCS12
ssl.enabled.protocols: TLSv1.2,TLSv1.3

### mTLS Settings for Kafka Client->Proxy connections
# Trust store settings to establish trusted Kafka client certificates for mTLS connections
# ssl.truststore.location: path/to/truststore/trusted.jks
# ssl.truststore.password: trusted
# ssl.truststore.type: JKS
### SET TO BLANK TO DISABLE CLIENT HOST-CERTIFICATE VERIFICATION:
# ssl.endpoint.identification.algorithm: 

## SOLACE JCSMP SETTINGS
########################
# NOTE: All Solace connection settings will have 'solace' qualifier on the property path. This
#       is to prevent conflicts with any Kafka properties, current or future. Includes SSL/TLS configuration.
# NOTE: Basic Auth 'username' and 'password' are specified by the Kafka producing application, using SASL

### Solace JCSMP Connection
# solace.host (REQUIRED): The IP address or hostname + optional SMF port of the Solace event broker.
# May include optional protocol (tcp/tcps). The port should be an SMF port on the broker.
# e.g.: 'tcp://localhost:55555', 'tcps://localhost:55443
#       '10.0.1.123:55443'     , 'tcps://mr-connection-abcdef12345.messaging.solace.cloud:55443'
# solace.vpn_name (REQUIRED): The Message VPN of the Solace broker to connect; Default = "default"

### CLOUD SERVICE EXAMPLE
solace.host: tcps://mr-connection-cloudsvc123.messaging.solace.cloud:55443
solace.vpn_name: my_vpn_name

### SSL/TLS Settings for Proxy->Solace Broker connections
# solace.ssl.enabled.protocols: TLSv1.2

### Truststore for Proxy->Solace Broker connections
# Set truststore if Solace Broker certificate cannot be verified publicly
# solace.ssl.truststore.location: path/to/truststore/trusted.jks
# solace.ssl.truststore.password: trusted
# solace.ssl.truststore.type: JKS
# SET TO BLANK TO DISABLE CLIENT HOST-CERTIFICATE VERIFICATION:
# solace.ssl.endpoint.identification.algorithm: 

### TODO: probably remove these settings
### Will need path to keystore + on local filesystem and CA shared with the broker to generate keys for mTLS
### mTLS Settings for Kafka Client->Proxy connections
# solace.ssl.keystore.location: path/to/keystore/client.jks
# solace.ssl.keystore.password: clientpass
# solace.ssl.keystore.type: JKS

## PROXY OPERATIONAL CONFIGURATION SETTINGS
###########################################

# proxy.separators (OPTIONAL): if the Kafka topic contains a "level separator", this will convert
# it into a Solace topic level separator '/'.  Can take multiple characters, e.g.: _. will
# convert either underscore or period to a slash.
# NOTE: this will also automatically convert any empty Solace topic levels to have a "_".
proxy.separators: _.

# message.max.bytes (OPTIONAL): The maximum Kafka record size in bytes that can be produced to a topic by a client.
# Applies globally to all Kafka topics subscribed on the broker.
# Default: 1048576
message.max.bytes: 1048576

# proxy.request.handler.threads (OPTIONAL): The number of worker threads for handling blocking 
# Kafka consumer requests, such as `FETCH`. This value should be set to:
#   [ Number of expected consumers ] * [ 1.5 < value < 2 ]
# Default: 32
proxy.request.handler.threads: 32

# proxy.partitions.per.topic (OPTIONAL): The number of virtual partitions to advertise per 
# Kafka topic for consumer clients. This value should be set to '[ Max consumers per Kafka topic ] * 2'.
# Default: 100
proxy.partitions.per.topic: 100

# proxy.queuename.qualifier (OPTIONAL): A qualifier on expected queue name when consumer
# subscribes to a Kafka topic. Example: 
# Consumer subscribes to 'TOPIC_A' for 'group.id' = 'GROUP1' then:
# - Queue Name Qualifier = 'KAFKA-PROXY' --> Queue Name = 'KAFKA-PROXY/TOPIC_A/GROUP1'
# - Queue Name Qualifier = '' --> Queue Name = 'TOPIC_A/GROUP1'
# Default: ''
proxy.queuename.qualifier: ""

# proxy.queuename.is.topicname (OPTIONAL): true/false -- Subscribed queue name on Solace broker is
# the Kafka consumer subscribed topic name. Ignore consumer group.id and  'proxy.queuename.qualifier' setting.
# Default: false
proxy.queuename.is.topicname: false

# proxy.fetch.compression.type (OPTIONAL): Typs of Kafka compression to use when returning
# record batches to consumer clients. Compression types supported by Kafka are valid:
# 'none', 'gzip', 'snappy', 'lz4', and 'zstd'.
# Default: 'none'
proxy.fetch.compression.type: none

# proxy.max.uncommitted.messages (OPTIONAL): The number of Solace messages that can be uncommitted
# by a consumer before halting delivery. Message delivery will resume after client commits messages.
# Default: 1000
proxy.max.uncommitted.messages: 1000
